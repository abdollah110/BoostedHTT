//////////////////////////////////////////////////////////
// This class has been automatically generated on
// Mon Mar 23 19:33:46 2020 by ROOT version 6.16/00
// from TTree mutau_tree/Event data (tag V09_04_13_01)
// found on file: ggH125.root
//////////////////////////////////////////////////////////

#ifndef boostHTT_h
#define boostHTT_h

#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>

// Header file for the classes stored in the TTree if any.
#include "vector"
#include "TString.h"
#include "vector"
#include "vector"
#include "vector"
#include "vector"

using namespace std;
// Fixed size dimensions of array or collections stored in the TTree if any.

   // Declaration of leaf types
   Int_t           run;
   Long64_t        event;
   Int_t           lumis;
   Bool_t          isData;
   Int_t           nVtx;
   Int_t           nGoodVtx;
   Bool_t          isPVGood;
   Float_t         vtx;
   Float_t         vty;
   Float_t         vtz;
   Float_t         rho;
   Float_t         rhoCentral;
   ULong64_t       HLTEleMuX;
   ULong64_t       HLTPho;
   ULong64_t       HLTPhoRejectedByPS;
   ULong64_t       HLTJet;
   ULong64_t       HLTEleMuXIsPrescaled;
   ULong64_t       HLTPhoIsPrescaled;
   ULong64_t       HLTJetIsPrescaled;
   vector<float>   *pdf;
   Float_t         pthat;
   Float_t         processID;
   Float_t         genWeight;
   Float_t         genHT;
   Float_t         genPho1;
   Float_t         genPho2;
   TString         *EventTag;
   Int_t           nPUInfo;
   vector<int>     *nPU;
   vector<int>     *puBX;
   vector<float>   *puTrue;
   Int_t           nMC;
   Int_t           numGenTau;
   vector<int>     *mcPID;
   vector<float>   *mcPt;
   vector<float>   *mcMass;
   vector<float>   *mcEta;
   vector<float>   *mcPhi;
   vector<float>   *mcE;
   vector<float>   *mcEt;
   vector<int>     *mcGMomPID;
   vector<int>     *mcMomPID;
   vector<float>   *mcMomPt;
   vector<float>   *mcMomMass;
   vector<float>   *mcMomEta;
   vector<float>   *mcMomPhi;
   vector<unsigned short> *mcStatusFlag;
   vector<int>     *mcParentage;
   vector<int>     *mcStatus;
   vector<float>   *taudaugPt;
   vector<float>   *taudaugEta;
   vector<float>   *taudaugPhi;
   vector<float>   *taudaugMass;
   Float_t         genMET;
   Float_t         genMETPhi;
   Int_t           metFilters;
   Float_t         pfMET;
   Float_t         pfMETPhi;
   Int_t           recoil;
   Float_t         pfMetNoRecoil;
   Float_t         pfMetPhiNoRecoil;
   Float_t         met_px;
   Float_t         met_py;
   Float_t         metcov00;
   Float_t         metcov01;
   Float_t         metcov10;
   Float_t         metcov11;
   Float_t         met_JESUp;
   Float_t         met_JESDown;
   Float_t         met_UESUp;
   Float_t         met_UESDown;
   Float_t         metphi_JESUp;
   Float_t         metphi_JESDown;
   Float_t         metphi_UESUp;
   Float_t         metphi_UESDown;
   Float_t         pfmetcorr_ex_UESUp;
   Float_t         pfmetcorr_ey_UESUp;
   Float_t         pfmetcorr_ex_UESDown;
   Float_t         pfmetcorr_ey_UESDown;
   Float_t         pfmetcorr_ex_JESUp;
   Float_t         pfmetcorr_ey_JESUp;
   Float_t         pfmetcorr_ex_JESDown;
   Float_t         pfmetcorr_ey_JESDown;
   Int_t           nEle;
   vector<int>     *eleCharge;
   vector<int>     *eleChargeConsistent;
   vector<float>   *eleEn;
   vector<float>   *eleSCEn;
   vector<float>   *eleEcalEn;
   vector<float>   *eleESEnP1;
   vector<float>   *eleESEnP2;
   vector<float>   *eleD0;
   vector<float>   *eleDz;
   vector<float>   *eleSIP;
   vector<float>   *elePt;
   vector<float>   *elePtError;
   vector<float>   *eleEta;
   vector<float>   *elePhi;
   vector<float>   *eleSCEta;
   vector<float>   *eleSCPhi;
   vector<int>     *eleConvVeto;
   vector<int>     *eleMissHits;
   vector<float>   *eleESEffSigmaRR;
   vector<float>   *elePFChIso;
   vector<float>   *elePFPhoIso;
   vector<float>   *elePFNeuIso;
   vector<float>   *elePFPUIso;
   vector<float>   *elePFClusEcalIso;
   vector<float>   *elePFClusHcalIso;
   vector<float>   *eleIDMVAIso;
   vector<float>   *eleIDMVANoIso;
   vector<ULong64_t> *eleFiredSingleTrgs;
   vector<ULong64_t> *eleFiredDoubleTrgs;
   vector<ULong64_t> *eleFiredL1Trgs;
   vector<unsigned short> *eleIDbit;
   Int_t           nMu;
   vector<float>   *muPt;
   vector<float>   *muEn;
   vector<float>   *muEta;
   vector<float>   *muPhi;
   vector<int>     *muCharge;
   vector<int>     *muType;
   vector<int>     *muIDbit;
   vector<float>   *muD0;
   vector<float>   *muDz;
   vector<float>   *muSIP;
   vector<float>   *muChi2NDF;
   vector<float>   *muInnerD0;
   vector<float>   *muInnerDz;
   vector<int>     *muMuonHits;
   vector<int>     *muStations;
   vector<int>     *muMatches;
   vector<int>     *muTrkQuality;
   vector<float>   *muIsoTrk;
   vector<float>   *muPFChIso;
   vector<float>   *muPFPhoIso;
   vector<float>   *muPFNeuIso;
   vector<float>   *muPFPUIso;
   vector<float>   *muPFChIso03;
   vector<float>   *muPFPhoIso03;
   vector<float>   *muPFNeuIso03;
   vector<float>   *muPFPUIso03;
   vector<ULong64_t> *muFiredTrgs;
   vector<ULong64_t> *muFiredL1Trgs;
   Int_t           nTau;
   vector<bool>    *taupfTausDiscriminationByDecayModeFinding;
   vector<bool>    *taupfTausDiscriminationByDecayModeFindingNewDMs;
   vector<bool>    *tauByMVA6VLooseElectronRejection;
   vector<bool>    *tauByMVA6LooseElectronRejection;
   vector<bool>    *tauByMVA6MediumElectronRejection;
   vector<bool>    *tauByMVA6TightElectronRejection;
   vector<bool>    *tauByMVA6VTightElectronRejection;
   vector<bool>    *tauByLooseMuonRejection3;
   vector<bool>    *tauByTightMuonRejection3;
   vector<bool>    *tauByLooseCombinedIsolationDeltaBetaCorr3Hits;
   vector<bool>    *tauByMediumCombinedIsolationDeltaBetaCorr3Hits;
   vector<bool>    *tauByTightCombinedIsolationDeltaBetaCorr3Hits;
   vector<float>   *tauCombinedIsolationDeltaBetaCorrRaw3Hits;
   vector<float>   *tauByIsolationMVArun2v1DBnewDMwLTraw;
   vector<float>   *tauByIsolationMVArun2v1DBoldDMwLTraw;
   vector<bool>    *tauByVTightIsolationMVArun2v1DBnewDMwLT;
   vector<bool>    *tauByVTightIsolationMVArun2v1DBoldDMwLT;
   vector<bool>    *tauByTightIsolationMVArun2v1DBnewDMwLT;
   vector<bool>    *tauByTightIsolationMVArun2v1DBoldDMwLT;
   vector<bool>    *tauByMediumIsolationMVArun2v1DBnewDMwLT;
   vector<bool>    *tauByMediumIsolationMVArun2v1DBoldDMwLT;
   vector<bool>    *tauByLooseIsolationMVArun2v1DBnewDMwLT;
   vector<bool>    *tauByLooseIsolationMVArun2v1DBoldDMwLT;
   vector<bool>    *tauByVLooseIsolationMVArun2v1DBnewDMwLT;
   vector<bool>    *tauByVLooseIsolationMVArun2v1DBoldDMwLT;
   vector<float>   *tauEta;
   vector<float>   *tauPhi;
   vector<float>   *tauPt;
   vector<float>   *tauEt;
   vector<float>   *tauCharge;
   vector<float>   *tauP;
   vector<float>   *tauPx;
   vector<float>   *tauPy;
   vector<float>   *tauPz;
   vector<float>   *tauVz;
   vector<float>   *tauEnergy;
   vector<float>   *tauMass;
   vector<float>   *tauDxy;
   vector<float>   *tauZImpact;
   vector<int>     *tauDecayMode;
   vector<bool>    *tauLeadChargedHadronExists;
   vector<float>   *tauLeadChargedHadronEta;
   vector<float>   *tauLeadChargedHadronPhi;
   vector<float>   *tauLeadChargedHadronPt;
   vector<float>   *tauChargedIsoPtSum;
   vector<float>   *tauNeutralIsoPtSum;
   vector<float>   *tauPuCorrPtSum;
   vector<int>     *tauNumSignalPFChargedHadrCands;
   vector<int>     *tauNumSignalPFNeutrHadrCands;
   vector<int>     *tauNumSignalPFGammaCands;
   vector<int>     *tauNumSignalPFCands;
   vector<int>     *tauNumIsolationPFChargedHadrCands;
   vector<int>     *tauNumIsolationPFNeutrHadrCands;
   vector<int>     *tauNumIsolationPFGammaCands;
   vector<int>     *tauNumIsolationPFCands;
   vector<float>   *taufootprintCorrection;
   vector<float>   *tauphotonPtSumOutsideSignalCone;
   vector<float>   *taudz;
   vector<float>   *taudxy;
   vector<float>   *tauByIsolationMVArun2v2DBoldDMwLTraw;
   vector<bool>    *tauByVTightIsolationMVArun2v2DBoldDMwLT;
   vector<bool>    *tauByTightIsolationMVArun2v2DBoldDMwLT;
   vector<bool>    *tauByMediumIsolationMVArun2v2DBoldDMwLT;
   vector<bool>    *tauByLooseIsolationMVArun2v2DBoldDMwLT;
   vector<bool>    *tauByVLooseIsolationMVArun2v2DBoldDMwLT;
   Int_t           nJet;
   vector<float>   *jetPt;
   vector<float>   *jetEn;
   vector<float>   *jetEta;
   vector<float>   *jetPhi;
   vector<float>   *jetRawPt;
   vector<float>   *jetRawEn;
   vector<float>   *jetMt;
   vector<float>   *jetArea;
   vector<float>   *jetLeadTrackPt;
   vector<float>   *jetLeadTrackEta;
   vector<float>   *jetLeadTrackPhi;
   vector<int>     *jetLepTrackPID;
   vector<float>   *jetLepTrackPt;
   vector<float>   *jetLepTrackEta;
   vector<float>   *jetLepTrackPhi;
   vector<float>   *jetCSV2BJetTags;
   vector<float>   *jetDeepCSVTags_b;
   vector<float>   *jetDeepCSVTags_bb;
   vector<float>   *jetDeepCSVTags_c;
   vector<float>   *jetDeepCSVTags_udsg;
   vector<int>     *jetPartonID;
   vector<int>     *jetHadFlvr;
   vector<bool>    *jetPFLooseId;
   vector<int>     *jetID;
   vector<float>   *jetPUID;
   vector<int>     *jetPUFullID;
   vector<float>   *jetJECUnc;
   vector<ULong64_t> *jetFiredTrgs;
   vector<float>   *jetCHF;
   vector<float>   *jetNHF;
   vector<float>   *jetCEF;
   vector<float>   *jetNEF;
   vector<int>     *jetNCH;
   vector<int>     *jetNNP;
   vector<float>   *jetMUF;
   Int_t           nAK8Jet;
   vector<float>   *AK8JetPt;
   vector<float>   *AK8JetEn;
   vector<float>   *AK8JetRawPt;
   vector<float>   *AK8JetRawEn;
   vector<float>   *AK8JetEta;
   vector<float>   *AK8JetPhi;
   vector<float>   *AK8JetMass;
   vector<float>   *AK8Jet_tau1;
   vector<float>   *AK8Jet_tau2;
   vector<float>   *AK8Jet_tau3;
   vector<float>   *AK8JetCHF;
   vector<float>   *AK8JetNHF;
   vector<float>   *AK8JetCEF;
   vector<float>   *AK8JetNEF;
   vector<int>     *AK8JetNCH;
   vector<int>     *AK8JetNNP;
   vector<float>   *AK8JetMUF;
   vector<int>     *AK8Jetnconstituents;
   vector<bool>    *AK8JetPFLooseId;
   vector<bool>    *AK8JetPFTightLepVetoId;
   vector<float>   *AK8JetSoftDropMass;
   vector<float>   *AK8JetSoftDropMassCorr;
   vector<float>   *AK8JetPrunedMass;
   vector<float>   *AK8JetPrunedMassCorr;
   vector<float>   *AK8JetpfBoostedDSVBTag;
   vector<float>   *AK8JetCSV;
   vector<float>   *AK8JetJECUnc;
   vector<float>   *AK8JetL2L3corr;
   vector<float>   *AK8puppiPt;
   vector<float>   *AK8puppiMass;
   vector<float>   *AK8puppiEta;
   vector<float>   *AK8puppiPhi;
   vector<float>   *AK8puppiSDL2L3corr;
   vector<float>   *AK8puppiSDMass;
   vector<float>   *AK8puppiSDMassL2L3Corr;
   vector<int>     *AK8JetPartonID;
   vector<int>     *AK8JetHadFlvr;
   vector<int>     *AK8JetGenJetIndex;
   vector<float>   *AK8JetGenJetEn;
   vector<float>   *AK8JetGenJetPt;
   vector<float>   *AK8JetGenJetEta;
   vector<float>   *AK8JetGenJetPhi;
   vector<int>     *AK8JetGenPartonID;
   vector<float>   *AK8JetGenEn;
   vector<float>   *AK8JetGenPt;
   vector<float>   *AK8JetGenEta;
   vector<float>   *AK8JetGenPhi;
   vector<int>     *AK8JetGenPartonMomID;
   vector<int>     *nAK8SDSJ;
   vector<vector<float> > *AK8SDSJPt;
   vector<vector<float> > *AK8SDSJEta;
   vector<vector<float> > *AK8SDSJPhi;
   vector<vector<float> > *AK8SDSJMass;
   vector<vector<float> > *AK8SDSJE;
   vector<vector<int> > *AK8SDSJCharge;
   vector<vector<int> > *AK8SDSJFlavour;
   vector<vector<float> > *AK8SDSJCSV;
   vector<int>     *nAK8puppiSDSJ;
   vector<vector<float> > *AK8puppiSDSJPt;
   vector<vector<float> > *AK8puppiSDSJEta;
   vector<vector<float> > *AK8puppiSDSJPhi;
   vector<vector<float> > *AK8puppiSDSJMass;
   vector<vector<float> > *AK8puppiSDSJE;
   vector<vector<int> > *AK8puppiSDSJCharge;
   vector<vector<int> > *AK8puppiSDSJFlavour;
   vector<vector<float> > *AK8puppiSDSJCSV;
   Int_t           nBoostedTau;
   vector<bool>    *boostedTaupfTausDiscriminationByDecayModeFinding;
   vector<bool>    *boostedTaupfTausDiscriminationByDecayModeFindingNewDMs;
   vector<bool>    *boostedTauByMVA6VLooseElectronRejection;
   vector<bool>    *boostedTauByMVA6LooseElectronRejection;
   vector<bool>    *boostedTauByMVA6MediumElectronRejection;
   vector<bool>    *boostedTauByMVA6TightElectronRejection;
   vector<bool>    *boostedTauByMVA6VTightElectronRejection;
   vector<bool>    *boostedTauByLooseMuonRejection3;
   vector<bool>    *boostedTauByTightMuonRejection3;
   vector<bool>    *boostedTauByLooseCombinedIsolationDeltaBetaCorr3Hits;
   vector<bool>    *boostedTauByMediumCombinedIsolationDeltaBetaCorr3Hits;
   vector<bool>    *boostedTauByTightCombinedIsolationDeltaBetaCorr3Hits;
   vector<float>   *boostedTauCombinedIsolationDeltaBetaCorrRaw3Hits;
   vector<float>   *boostedTauByIsolationMVArun2v1DBnewDMwLTraw;
   vector<float>   *boostedTauByIsolationMVArun2v1DBoldDMwLTraw;
   vector<float>   *boostedTauByIsolationMVArun2v1PWnewDMwLTraw;
   vector<float>   *boostedTauByIsolationMVArun2v1PWoldDMwLTraw;
   vector<bool>    *boostedTauByVTightIsolationMVArun2v1DBnewDMwLT;
   vector<bool>    *boostedTauByVTightIsolationMVArun2v1DBoldDMwLT;
   vector<bool>    *boostedTauByVTightIsolationMVArun2v1PWnewDMwLT;
   vector<bool>    *boostedTauByVTightIsolationMVArun2v1PWoldDMwLT;
   vector<bool>    *boostedTauByTightIsolationMVArun2v1DBnewDMwLT;
   vector<bool>    *boostedTauByTightIsolationMVArun2v1DBoldDMwLT;
   vector<bool>    *boostedTauByTightIsolationMVArun2v1PWnewDMwLT;
   vector<bool>    *boostedTauByTightIsolationMVArun2v1PWoldDMwLT;
   vector<bool>    *boostedTauByMediumIsolationMVArun2v1DBnewDMwLT;
   vector<bool>    *boostedTauByMediumIsolationMVArun2v1DBoldDMwLT;
   vector<bool>    *boostedTauByMediumIsolationMVArun2v1PWnewDMwLT;
   vector<bool>    *boostedTauByMediumIsolationMVArun2v1PWoldDMwLT;
   vector<bool>    *boostedTauByLooseIsolationMVArun2v1DBnewDMwLT;
   vector<bool>    *boostedTauByLooseIsolationMVArun2v1DBoldDMwLT;
   vector<bool>    *boostedTauByLooseIsolationMVArun2v1PWnewDMwLT;
   vector<bool>    *boostedTauByLooseIsolationMVArun2v1PWoldDMwLT;
   vector<bool>    *boostedTauByVLooseIsolationMVArun2v1DBnewDMwLT;
   vector<bool>    *boostedTauByVLooseIsolationMVArun2v1DBoldDMwLT;
   vector<bool>    *boostedTauByVLooseIsolationMVArun2v1PWnewDMwLT;
   vector<bool>    *boostedTauByVLooseIsolationMVArun2v1PWoldDMwLT;
   vector<float>   *boostedTauByIsolationMVArun2v2DBoldDMwLTraw;
   vector<bool>    *boostedTauByVTightIsolationMVArun2v2DBoldDMwLT;
   vector<bool>    *boostedTauByTightIsolationMVArun2v2DBoldDMwLT;
   vector<bool>    *boostedTauByMediumIsolationMVArun2v2DBoldDMwLT;
   vector<bool>    *boostedTauByLooseIsolationMVArun2v2DBoldDMwLT;
   vector<bool>    *boostedTauByVLooseIsolationMVArun2v2DBoldDMwLT;
   vector<float>   *boostedTauEta;
   vector<float>   *boostedTauPhi;
   vector<float>   *boostedTauPt;
   vector<float>   *boostedTauEt;
   vector<float>   *boostedTauCharge;
   vector<float>   *boostedTauP;
   vector<float>   *boostedTauPx;
   vector<float>   *boostedTauPy;
   vector<float>   *boostedTauPz;
   vector<float>   *boostedTauVz;
   vector<float>   *boostedTauEnergy;
   vector<float>   *boostedTauMass;
   vector<float>   *boostedTauDxy;
   vector<float>   *boostedTauZImpact;
   vector<int>     *boostedTauDecayMode;
   vector<bool>    *boostedTauLeadChargedHadronExists;
   vector<float>   *boostedTauLeadChargedHadronEta;
   vector<float>   *boostedTauLeadChargedHadronPhi;
   vector<float>   *boostedTauLeadChargedHadronPt;
   vector<float>   *boostedTauChargedIsoPtSum;
   vector<float>   *boostedTauNeutralIsoPtSum;
   vector<float>   *boostedTauPuCorrPtSum;
   vector<int>     *boostedTauNumSignalPFChargedHadrCands;
   vector<int>     *boostedTauNumSignalPFNeutrHadrCands;
   vector<int>     *boostedTauNumSignalPFGammaCands;
   vector<int>     *boostedTauNumSignalPFCands;
   vector<int>     *boostedTauNumIsolationPFChargedHadrCands;
   vector<int>     *boostedTauNumIsolationPFNeutrHadrCands;
   vector<int>     *boostedTauNumIsolationPFGammaCands;
   vector<int>     *boostedTauNumIsolationPFCands;
   vector<float>   *boostedTaufootprintCorrection;
   vector<float>   *boostedTauphotonPtSumOutsideSignalCone;
   vector<float>   *boostedTaudz;
   vector<float>   *boostedTaudxy;
   Float_t         tmass;
   Int_t           era;
//   Float_t         met_px;
//   Float_t         met_py;
//   Float_t         met;
//   Float_t         metphi;
   Float_t         m_1;
   Float_t         px_1;
   Float_t         py_1;
   Float_t         pz_1;
   Float_t         e_1;
   Float_t         pt_1;
   Float_t         phi_1;
   Float_t         eta_1;
   Float_t         m_2;
   Float_t         px_2;
   Float_t         py_2;
   Float_t         pz_2;
   Float_t         e_2;
   Float_t         pt_2;
   Float_t         phi_2;
   Float_t         eta_2;
//   Float_t         metcov00;
//   Float_t         metcov01;
//   Float_t         metcov10;
//   Float_t         metcov11;
   Int_t           decayMode2;
   Int_t tauIndex;
   Int_t lepIndex;
   
//   Float_t         tmass;
//   Int_t           era;
//   Float_t         met_px;
//   Float_t         met_py;
//   Float_t         met;
//   Float_t         metphi;
//   Float_t         m_1;
//   Float_t         px_1;
//   Float_t         py_1;
//   Float_t         pz_1;
//   Float_t         e_1;
//   Float_t         pt_1;
//   Float_t         phi_1;
//   Float_t         eta_1;
//   Float_t         m_2;
//   Float_t         px_2;
//   Float_t         py_2;
//   Float_t         pz_2;
//   Float_t         e_2;
//   Float_t         pt_2;
//   Float_t         phi_2;
//   Float_t         eta_2;
//   Float_t         metcov00;
//   Float_t         metcov01;
//   Float_t         metcov10;
//   Float_t         metcov11;
//   Int_t           decayMode2;
//   Float_t         tmass;
//   Int_t           era;
//   Float_t         met_px;
//   Float_t         met_py;
//   Float_t         met;
//   Float_t         metphi;
//   Float_t         m_1;
//   Float_t         px_1;
//   Float_t         py_1;
//   Float_t         pz_1;
//   Float_t         e_1;
//   Float_t         pt_1;
//   Float_t         phi_1;
//   Float_t         eta_1;
//   Float_t         m_2;
//   Float_t         px_2;
//   Float_t         py_2;
//   Float_t         pz_2;
//   Float_t         e_2;
//   Float_t         pt_2;
//   Float_t         phi_2;
//   Float_t         eta_2;
//   Float_t         metcov00;
//   Float_t         metcov01;
//   Float_t         metcov10;
//   Float_t         metcov11;
//   Int_t           decayMode2;
//   Float_t         tmass;
//   Int_t           era;
//   Float_t         met_px;
//   Float_t         met_py;
//   Float_t         met;
//   Float_t         metphi;
//   Float_t         m_1;
//   Float_t         px_1;
//   Float_t         py_1;
//   Float_t         pz_1;
//   Float_t         e_1;
//   Float_t         pt_1;
//   Float_t         phi_1;
//   Float_t         eta_1;
//   Float_t         m_2;
//   Float_t         px_2;
//   Float_t         py_2;
//   Float_t         pz_2;
//   Float_t         e_2;
//   Float_t         pt_2;
//   Float_t         phi_2;
//   Float_t         eta_2;
//   Float_t         metcov00;
//   Float_t         metcov01;
//   Float_t         metcov10;
//   Float_t         metcov11;
//   Int_t           decayMode2;
//   Float_t         tmass;
//   Int_t           era;
//   Float_t         met_px;
//   Float_t         met_py;
//   Float_t         met;
//   Float_t         metphi;
//   Float_t         m_1;
//   Float_t         px_1;
//   Float_t         py_1;
//   Float_t         pz_1;
//   Float_t         e_1;
//   Float_t         pt_1;
//   Float_t         phi_1;
//   Float_t         eta_1;
//   Float_t         m_2;
//   Float_t         px_2;
//   Float_t         py_2;
//   Float_t         pz_2;
//   Float_t         e_2;
//   Float_t         pt_2;
//   Float_t         phi_2;
//   Float_t         eta_2;
//   Float_t         metcov00;
//   Float_t         metcov01;
//   Float_t         metcov10;
//   Float_t         metcov11;
//   Int_t           decayMode2;
//   Float_t         tmass;
//   Int_t           era;
//   Float_t         met_px;
//   Float_t         met_py;
//   Float_t         met;
//   Float_t         metphi;
//   Float_t         m_1;
//   Float_t         px_1;
//   Float_t         py_1;
//   Float_t         pz_1;
//   Float_t         e_1;
//   Float_t         pt_1;
//   Float_t         phi_1;
//   Float_t         eta_1;
//   Float_t         m_2;
//   Float_t         px_2;
//   Float_t         py_2;
//   Float_t         pz_2;
//   Float_t         e_2;
//   Float_t         pt_2;
//   Float_t         phi_2;
//   Float_t         eta_2;
//   Float_t         metcov00;
//   Float_t         metcov01;
//   Float_t         metcov10;
//   Float_t         metcov11;
//   Int_t           decayMode2;
//   Float_t         tmass;
//   Int_t           era;
//   Float_t         met_px;
//   Float_t         met_py;
//   Float_t         met;
//   Float_t         metphi;
//   Float_t         m_1;
//   Float_t         px_1;
//   Float_t         py_1;
//   Float_t         pz_1;
//   Float_t         e_1;
//   Float_t         pt_1;
//   Float_t         phi_1;
//   Float_t         eta_1;
//   Float_t         m_2;
//   Float_t         px_2;
//   Float_t         py_2;
//   Float_t         pz_2;
//   Float_t         e_2;
//   Float_t         pt_2;
//   Float_t         phi_2;
//   Float_t         eta_2;
//   Float_t         metcov00;
//   Float_t         metcov01;
//   Float_t         metcov10;
//   Float_t         metcov11;
//   Int_t           decayMode2;
//   Float_t         tmass;
//   Int_t           era;
//   Float_t         met_px;
//   Float_t         met_py;
//   Float_t         met;
//   Float_t         metphi;
//   Float_t         m_1;
//   Float_t         px_1;
//   Float_t         py_1;
//   Float_t         pz_1;
//   Float_t         e_1;
//   Float_t         pt_1;
//   Float_t         phi_1;
//   Float_t         eta_1;
//   Float_t         m_2;
//   Float_t         px_2;
//   Float_t         py_2;
//   Float_t         pz_2;
//   Float_t         e_2;
//   Float_t         pt_2;
//   Float_t         phi_2;
//   Float_t         eta_2;
//   Float_t         metcov00;
//   Float_t         metcov01;
//   Float_t         metcov10;
//   Float_t         metcov11;
//   Int_t           decayMode2;
//   Float_t         tmass;
//   Int_t           era;
//   Float_t         met_px;
//   Float_t         met_py;
//   Float_t         met;
//   Float_t         metphi;
//   Float_t         m_1;
//   Float_t         px_1;
//   Float_t         py_1;
//   Float_t         pz_1;
//   Float_t         e_1;
//   Float_t         pt_1;
//   Float_t         phi_1;
//   Float_t         eta_1;
//   Float_t         m_2;
//   Float_t         px_2;
//   Float_t         py_2;
//   Float_t         pz_2;
//   Float_t         e_2;
//   Float_t         pt_2;
//   Float_t         phi_2;
//   Float_t         eta_2;
//   Float_t         metcov00;
//   Float_t         metcov01;
//   Float_t         metcov10;
//   Float_t         metcov11;
//   Int_t           decayMode2;
//   Float_t         tmass;
//   Int_t           era;
//   Float_t         met_px;
//   Float_t         met_py;
//   Float_t         met;
//   Float_t         metphi;
//   Float_t         m_1;
//   Float_t         px_1;
//   Float_t         py_1;
//   Float_t         pz_1;
//   Float_t         e_1;
//   Float_t         pt_1;
//   Float_t         phi_1;
//   Float_t         eta_1;
//   Float_t         m_2;
//   Float_t         px_2;
//   Float_t         py_2;
//   Float_t         pz_2;
//   Float_t         e_2;
//   Float_t         pt_2;
//   Float_t         phi_2;
//   Float_t         eta_2;
//   Float_t         metcov00;
//   Float_t         metcov01;
//   Float_t         metcov10;
//   Float_t         metcov11;
//   Int_t           decayMode2;
//   Float_t         tau1_pt;
//   Float_t         tau1_eta;
//   Float_t         tau1_phi;
//   Float_t         tau1_m;
//   Float_t         tau2_pt;
//   Float_t         tau2_eta;
//   Float_t         tau2_phi;
//   Float_t         tau2_m;
   Float_t         m_sv;
   Float_t         pt_sv;
   
#endif // #ifdef boostHTT_cxx
